{"version":3,"sources":["constants/api_addresses.js","constants/SingaporeRegion.js","components/DateTime.js","components/custom/CustomMenu.js","components/LocationList.js","components/RegionSelector.js","constants/directions.js","components/WeatherInfo.js","components/utils/FindNearestGeoPoint.js","components/utils/TokenValidator.js","components/utils/CreateBatchAPI.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["API_ADDRESSES","NORTH_REGION","WEST_REGION","CENTRAL_REGION","SOUTH_REGION","EAST_REGION","DateTime","props","useState","selectedDate","setSelectedDate","set_current_date","className","selected","onChange","date","console","log","liftDataUp","showTimeSelect","showYearDropdown","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","popperModifiers","preventOverflow","enabled","maxDate","subDays","Date","minTime","setHours","setMinutes","maxTime","CustomMenu","React","forwardRef","ref","children","style","labeledBy","value","setValue","aria-labelledby","FormControl","autoFocus","placeholder","e","target","Children","toArray","filter","child","toLowerCase","startsWith","LocationList","dict","location_data","set_current_traffic_data","set_current_road","location_list_toggle","Dropdown","Toggle","disabled","variant","id","maxHeight","Menu","as","map","dataset","index","road","data","length","Item","eventKey","key","onSelect","updateIndex","onClick","preventDefault","updateRoad","RegionSelector","selectedRegion","setSelectedRegion","rev_geocode","updater","val","WeatherInfo","weather_data","distance","lat1","lon1","lat2","lon2","p","c","Math","cos","a","asin","sqrt","email","process","pwd","bodyFormData","FormData","set","axios","method","url","headers","response","create_batch_api","data_val","get","params","location","latitude","longitude","buffer","token","Cookies","ErrorMessage","Alert","App","fetch_traffic_and_weather_data","setState","loading_button","error_message","tzoffset","getTimezoneOffset","localISOTime","state","current_date","toISOString","split","traffic_images_data","weather_forecast_data","_","isEmpty","image_data","classifying_points_to_regions","north","south","east","west","central","i","point","classifyPoint","push","Regions","NORTH","SOUTH","CENTRAL","EAST","WEST","current_region","list_of_promises","all","current_traffic_data","current_index","set_current_weather_condition_and_approx_location","current_road","closest","minDiff","diff","FindNearestGeoPoint","current_weather_data","TokenValidator","then","catch","err","Container","Row","this","Button","Spinner","animation","size","role","aria-hidden","src","alt","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gcAAaA,EACS,sDADTA,EAEU,+DAFVA,EAGW,iEAHXA,EAII,6DCJJC,EAAe,CAAC,CAAC,SAAS,YACnC,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YAGDC,EAAc,CAAC,CAAC,QAAQ,YACjC,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,QAAQ,YACT,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,QAAQ,YACT,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,QAAQ,YACT,CAAC,SAAS,aAGDC,EAAiB,CAAC,CAAC,SAAS,YACrC,CAAC,SAAS,YACV,CAAC,QAAQ,WACT,CAAC,SAAS,aAGDC,EAAe,CAAC,CAAC,QAAQ,YAClC,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YAGDC,EAAc,CAAC,CAAC,QAAQ,YACjC,CAAC,SAAS,YACV,CAAC,SAAS,WACV,CAAC,SAAS,WACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,SAAS,WACV,CAAC,SAAS,YACV,CAAC,SAAS,YACV,CAAC,QAAQ,Y,4ECjDE,SAASC,EAASC,GAAQ,IAAD,EACIC,mBAAS,MADb,mBAC7BC,EAD6B,KACfC,EADe,KAE5BC,EAAqBJ,EAArBI,iBASR,OACE,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,aAAf,SACA,kBAAC,IAAD,CACIC,SAAUJ,EACVK,SAAU,SAAAC,GAAI,OAZL,SAACA,GAChBC,QAAQC,IAAIR,GACZC,EAAgBK,GAChBJ,EAAiBI,GASOG,CAAWH,IAC7BI,gBAAc,EACdC,kBAAgB,EAChBC,WAAW,QACXC,cAAe,GACfC,YAAY,OACZC,WAAW,uBACXC,gBAAgB,yBAChBC,gBAAiB,CACbC,gBAAiB,CACbC,SAAS,IAGjBC,QAASC,kBAAQ,IAAIC,KAAQ,GAC7BC,QAASC,kBAASC,kBAAW,IAAIH,KAAQ,GAAI,GAC7CI,QAASF,kBAASC,kBAAW,IAAIH,KAAQ,IAAK,O,qBCN7CK,EA7BIC,IAAMC,YACrB,WAA+DC,GAAS,IAArEC,EAAoE,EAApEA,SAAUC,EAA0D,EAA1DA,MAAO7B,EAAmD,EAAnDA,UAA8B8B,EAAqB,EAAxC,mBAAwC,EACzClC,mBAAS,IADgC,mBAC5DmC,EAD4D,KACrDC,EADqD,KAGnE,OACI,yBACIL,IAAKA,EACLE,MAAOA,EACP7B,UAAWA,EACXiC,kBAAiBH,GAEjB,kBAACI,EAAA,EAAD,CACIC,WAAS,EACTnC,UAAU,mBACVoC,YAAY,oBACZlC,SAAU,SAAAmC,GAAC,OAAIL,EAASK,EAAEC,OAAOP,QACjCA,MAAOA,IAEX,wBAAI/B,UAAU,iBACTyB,IAAMc,SAASC,QAAQZ,GAAUa,QAC9B,SAAAC,GAAK,OACAX,GAASW,EAAM/C,MAAMiC,SAASe,cAAcC,WAAWb,W,OClBrE,SAASc,EAAalD,GAEjC,IAAImD,EAAO,GACHC,EAIJpD,EAJIoD,cACJC,EAGArD,EAHAqD,yBACAC,EAEAtD,EAFAsD,iBACAC,EACAvD,EADAuD,qBAWJ,OACI,yBAAKlD,UAAU,kBACX,kBAACmD,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,SAAUH,EAAsBI,QAAQ,UAAUC,GAAG,iBAAiB1B,MAAO,CAAE2B,UAAW,SAA3G,qBAIA,kBAACL,EAAA,EAASM,KAAV,CAAeC,GAAIlC,GACduB,EAAcY,KAAI,SAACC,EAASC,GACzB,IAAIC,EAAO,8BAQX,OAPIF,EAAQG,KAAR,YAA4BC,OAAS,IACrCF,EAAOF,EAAQG,KAAR,YAA4B,GAA5B,KAEajB,EAAKgB,GAArBA,KAAQhB,EAAqBA,EAAKgB,GAAQ,EAC1B,EAChBhB,EAAKgB,GAAQ,IAAKA,EAAOA,EAAO,IAAMhB,EAAKgB,KAGjD,kBAACX,EAAA,EAASc,KAAV,CACIP,GAAG,SACH3B,MAAO+B,EACPI,SAAUL,EACVM,IAAKN,EACLO,SAAU,SAAAP,GAAK,OA/BrB,SAACA,GACjBb,EAAyBa,GA8BgBQ,CAAYR,IAC/BS,QAAS,SAAAjC,GAAC,OA7BjB,SAAAA,GACjBA,EAAEkC,iBACFtB,EAAiBZ,EAAEC,OAAOP,OA2BYyC,CAAWnC,KAC3ByB,S,OCzCb,SAASW,EAAe9E,GAAQ,IAAD,EAEEC,mBCT3B,SDOyB,mBAEnC8E,EAFmC,KAEnBC,EAFmB,KAGnCC,EAAejF,EAAfiF,YAEDC,EAAU,SAACC,GACbF,EAAYE,GACZH,EAAkBG,IAGtB,OACI,kBAAC3B,EAAA,EAAD,CAAUnD,UAAU,mBAChB,kBAACmD,EAAA,EAASC,OAAV,CAAiBE,QAAQ,UAAUC,GAAG,iBAAiB1B,MAAO,CAAE2B,UAAW,SAA3E,mBACqBkB,GAGrB,kBAACvB,EAAA,EAASM,KAAV,KACI,kBAACN,EAAA,EAASc,KAAV,CAAeC,SCxBV,QDwB2BE,SAAU,SAAAU,GAAG,OAAID,EAAQC,KAAzD,SACA,kBAAC3B,EAAA,EAASc,KAAV,CAAeC,SCxBV,QDwB2BE,SAAU,SAAAU,GAAG,OAAID,EAAQC,KAAzD,SACA,kBAAC3B,EAAA,EAASc,KAAV,CAAeC,SCtBR,UDsB2BE,SAAU,SAAAU,GAAG,OAAID,EAAQC,KAA3D,WACA,kBAAC3B,EAAA,EAASc,KAAV,CAAeC,SCzBX,ODyB2BE,SAAU,SAAAU,GAAG,OAAID,EAAQC,KAAxD,QACA,kBAAC3B,EAAA,EAASc,KAAV,CAAeC,SCzBX,ODyB2BE,SAAU,SAAAU,GAAG,OAAID,EAAQC,KAAxD,UEPDC,MAjBf,SAAqBpF,GAAQ,IAEjBqF,EAAkBrF,EAAlBqF,aAER,OACE,6BACI,qDACA,4CAAcA,EAAY,OAC1B,0DAA4BA,EAAY,a,iBCZlD,SAASC,EAASC,EAAMC,EAAMC,EAAMC,GAChC,IAAMC,EAAI,oBACJC,EAAIC,KAAKC,IACTC,EAAI,GAAMH,GAAGH,EAAOF,GAAQI,GAAG,EACjCC,EAAEL,EAAOI,GAAKC,EAAEH,EAAOE,IACtB,EAAIC,GAAGF,EAAOF,GAAQG,IAAI,EAE/B,OAAO,MAAQE,KAAKG,KAAKH,KAAKI,KAAKF,ICJvC,IAAMG,EAAQC,sBACRC,EAAMD,c,4CAEL,gCAAAJ,EAAA,6DACCM,EAAe,IAAIC,UAEVC,IAAI,QAASL,GAC1BG,EAAaE,IAAI,WAAYH,GAJ1B,kBAOwBI,IAAM,CACzBC,OAAQ,OACRC,IAAKjH,EACL2E,KAAMiC,EACNM,QAAS,CAAC,eAAgB,yBAX/B,uBAOSvC,EAPT,EAOSA,KAPT,kBAaQA,GAbR,kCAgBK,KAAMwC,UACNnG,QAAQC,IAAI,KAAMkG,UAjBvB,2D,sBCFA,IAAMC,EAAmB,SAACzC,GAC7B,OAAOA,EAAKJ,KAAI,SAAC8C,GACb,OAAON,IAAMO,IAAItH,EAAkC,CAC/CuH,OAAQ,CACJC,SAAS,GAAD,OAAKH,EAASG,SAASC,SAAvB,YAAmCJ,EAASG,SAASE,WAC7DC,OAAQ,GACRC,MAAOC,IAAQP,IAAI,gB,UCN5B,SAASQ,KACZ,OACE,kBAACC,GAAA,EAAD,CAAO7D,QAAQ,UAAf,0E,ICoPS8D,G,YAlOb,WAAYzH,GAAQ,IAAD,8BACjB,4CAAMA,KAkBR0H,+BAnBmB,sBAmBc,kCAAA3B,EAAA,6DAK/B,EAAK4B,SAAS,CAAEC,gBAAgB,EAAMC,eAAe,IAEjDC,EAA8C,KAAlC,IAAItG,MAAQuG,oBACxBC,EAAgB,IAAIxG,KAAK,EAAKyG,MAAMC,aAAeJ,GAAWK,cAAcC,MAAM,KAAK,GAR5D,kBAWK5B,IAAMO,IAAItH,EAAiC,CAC3EuH,OAAQ,CACN,UAAagB,KAbY,cAWvBK,EAXuB,gBAiBO7B,IAAMO,IAAItH,EAAmC,CAC/EuH,OAAQ,CACN,UAAagB,KAnBY,OAiBvBM,EAjBuB,OAuBzBC,IAAEC,QAAQH,EAAoBjE,KAApB,MAAkC,IAC9C,EAAKuD,SAAS,CACZC,gBAAgB,EAChBC,eAAe,IAIjB,EAAKF,SAAS,CACZc,WAAYJ,EAAoBjE,KAApB,MAAkC,GAAlC,QACZiB,aAAciD,EAAsBlE,OACnC,kBAAM,EAAKsE,mCAjCa,kDAqCzB,KAAM9B,UACRnG,QAAQC,IAAI,KAAMkG,UAtCS,0DAnBd,EA8DnB8B,8BAAgC,WAS9B,IAPA,IAAIC,EAAQ,GACRC,EAAQ,GACRC,EAAO,GACPC,EAAO,GACPC,EAAU,GAEVjC,EAAW,EAAKmB,MAAMQ,WACjBO,EAAE,EAAGA,EAAIlC,EAASzC,OAAQ2E,IAAK,CACtC,IAAIC,EAAQ,CAACnC,EAASkC,GAAG/B,SAASC,SAAUJ,EAASkC,GAAG/B,SAASE,WAEtB,IAAvC+B,IAAcxJ,EAAcuJ,GACW,IAAvCC,IAAcrJ,EAAcoJ,GACa,IAAzCC,IAActJ,EAAgBqJ,GACQ,IAAtCC,IAAcpJ,EAAamJ,GACW,IAAtCC,IAAcvJ,EAAasJ,IAAeH,EAAKK,KAAKrC,EAASkC,IADnBH,EAAKM,KAAKrC,EAASkC,IADfD,EAAQI,KAAKrC,EAASkC,IADzBJ,EAAMO,KAAKrC,EAASkC,IADnBL,EAAMQ,KAAKrC,EAASkC,IAOtE,EAAKrB,SAAS,CACZyB,QAAS,CACPC,MAAOV,EACPW,MAAOV,EACPW,QAASR,EACTS,KAAMX,EACNY,KAAMX,KAEP,kBAAK,EAAK7D,YAAY,EAAKgD,MAAMyB,oBAzFnB,EA4FnBzE,YA5FmB,uCA4FL,WAAOyE,GAAP,iBAAA3D,EAAA,6DAIZ,EAAK4B,SAAS,CAAEC,gBAAgB,EAAMrE,sBAAsB,IACtDoG,EAAmB9C,EAAiB,EAAKoB,MAAMmB,QAAQM,IALjD,SAMQlD,IAAMoD,IAAID,GANlB,OAMNvF,EANM,OAOZ,EAAKuD,SAAS,CACZvE,cAAegB,EACfsF,iBACA9B,gBAAgB,EAChBrE,sBAAsB,IAXZ,2CA5FK,wDA2GnBF,yBAA2B,SAACa,GAI1B,IAAI2F,EAAuB,EAAK5B,MAAMmB,QAAQ,EAAKnB,MAAMyB,gBAAgBxF,GACzEzD,QAAQC,IAAImJ,EAAoB,UAChC,EAAKlC,SAAS,CACZkC,uBACAC,cAAe5F,IACd,WACD,EAAK6F,wDArHU,EAyHnBzG,iBAAmB,SAAC0G,GAKlB,EAAKrC,SAAS,CACZqC,kBA/He,EAoInBD,kDAAoD,WAClD,IAGI7F,EJtID,SAA6B+E,EAAO7E,GAOvC,IAHA,IACI6F,EADAC,EAAU,KAGLhG,EAAM,EAAGA,EAAME,EAAI,cAAkBC,OAAQH,IAAS,CAC3D,IAAIiG,EAAO7E,EAAS2D,EAAM/B,SAAU+B,EAAM9B,UACtC/C,EAAI,cAAkBF,GAAtB,wBACAE,EAAI,cAAkBF,GAAtB,0BACAiG,EAAOD,IACPD,EAAU/F,EACVgG,EAAUC,GAGlB,OAAOF,EIsHKG,CAAoB,CAAClD,SAHlB,EAAKe,MAAM4B,qBAAX,kBAG4B1C,UAF3B,EAAKc,MAAM4B,qBAAX,oBAEuC,EAAK5B,MAAM5C,cAClE,EAAKsC,SAAS,CACZ0C,qBAAsB,EAAKpC,MAAM5C,aAAX,MAAiC,GAAjC,UAAiDnB,MA1IxD,EA8InB9D,iBAAmB,SAAC8H,GAIlB,EAAKP,SAAS,CAAEO,kBAhJhB,EAAKD,MAAQ,CACXQ,WAAa,GACbpD,aAAc,GACd+D,QAAS,GACThG,cAAgB,GAChBsG,eN/Be,QMgCfM,aAAc,GACdF,cAAe,KACfD,qBAAsB,GACtBQ,qBAAsB,GACtBnC,aAAc,GACdN,gBAAgB,EAChBrE,sBAAsB,EACtBsE,eAAe,GAfA,E,kFHlBd,WAAP,gCG2K0ByC,GACRC,MAAK,SAAAnG,GACjBkD,IAAQf,IAAI,QAASnC,EAAI,iBACxBoG,OAAM,SAAAC,GACPhK,QAAQC,IAAI+J,Q,+BAMd,OACI,yBAAKpK,UAAU,OACb,kBAACqK,EAAA,EAAD,KACE,wBAAIrK,UAAU,oBAAd,2BACA,uBAAGA,UAAU,eAAb,2EACA,wBAAIA,UAAU,SACd,kBAACsK,EAAA,EAAD,CAAKtK,UAAU,UACX,kBAAC,EAAD,CAAUD,iBAAkBwK,KAAKxK,mBACjC,yBAAKC,UAAU,iBACZuK,KAAK3C,MAAML,eACR,kBAACiD,EAAA,EAAD,CAAQlH,QAAQ,UAAUD,UAAQ,GAChC,kBAACoH,EAAA,EAAD,CACI/G,GAAG,OACHgH,UAAU,OACVC,KAAK,KACLC,KAAK,SACLC,cAAY,SANlB,cAUA,kBAACL,EAAA,EAAD,CAAQxK,UAAU,YACVsD,QAAQ,UACRgB,QAASiG,KAAKlD,gCAFtB,QAORa,IAAEC,QAAQoC,KAAK3C,MAAM7E,gBAAmBwH,KAAK3C,MAAMJ,cAavC,KAZT,yBAAKxH,UAAU,YACd,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAgB4E,YAAa2F,KAAK3F,eAEpC,yBAAK5E,UAAU,UACf,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAc+C,cAAewH,KAAK3C,MAAM7E,cAC1BC,yBAA0BuH,KAAKvH,yBAC/BC,iBAAkBsH,KAAKtH,iBACvBC,qBAAsBqH,KAAK3C,MAAM1E,yBAMtDqH,KAAK3C,MAAMJ,cACP,yBAAKxH,UAAU,UAAS,kBAACkH,GAAD,OAA0B,KAGvD,6BACA,4BAAKqD,KAAK3C,MAAM+B,cACdzB,IAAEC,QAAQoC,KAAK3C,MAAM4B,uBAA0BtB,IAAEC,QAAQoC,KAAK3C,MAAMoC,sBAMxD,KALT,kBAACM,EAAA,EAAD,CAAKtK,UAAU,UACd,yBAAKuD,GAAG,iBACN,yBAAKuH,IAAKP,KAAK3C,MAAM4B,qBAAX,MAA0CuB,IAAI,MAE1D,kBAAC,EAAD,CAAa/F,aAAcuF,KAAK3C,MAAMoC,8B,GA1NtCgB,aCXEC,QACW,cAA7BC,OAAOtE,SAASuE,UAEe,UAA7BD,OAAOtE,SAASuE,UAEhBD,OAAOtE,SAASuE,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,GAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.701f7595.chunk.js","sourcesContent":["export const API_ADDRESSES = {\n    'traffic_images': 'https://api.data.gov.sg/v1/transport/traffic-images',\n    'reverse_geocode': 'https://developers.onemap.sg/privateapi/commonsvc/revgeocode',\n    'weather_forecast': 'https://api.data.gov.sg/v1/environment/2-hour-weather-forecast',\n    'get_token': 'https://developers.onemap.sg/privateapi/auth/post/getToken',\n};","export const NORTH_REGION = [[1.437702,103.755741],\n    [1.388622,103.740292],\n    [1.366999,103.777714],\n    [1.363224,103.829212],\n    [1.361164,103.859596],\n    [1.419512,103.898735],\n    [1.473053,103.824234],\n    [1.438732,103.75557],\n];\n\nexport const WEST_REGION = [[1.36593,103.778318],\n    [1.324399,103.758405],\n    [1.299687,103.755315],\n    [1.270855,103.736432],\n    [1.22795,103.681501],\n    [1.218383,103.609403],\n    [1.280167,103.611463],\n    [1.33577,103.632749],\n    [1.406475,103.662961],\n    [1.432216,103.684247],\n    [1.450406,103.718236],\n    [1.438024,103.756276],\n    [1.38873,103.740369],\n    [1.366555,103.778573],\n];\n\nexport const CENTRAL_REGION = [[1.324801,103.758498],\n    [1.314055,103.859828],\n    [1.36116,103.85941],\n    [1.366909,103.778724],\n];\n\nexport const SOUTH_REGION = [[1.32418,103.759234],\n    [1.273038,103.748248],\n    [1.254847,103.784983],\n    [1.239057,103.836825],\n    [1.277157,103.872187],\n    [1.314227,103.860171],\n    [1.324647,103.75978],\n];\n\nexport const EAST_REGION = [[1.41994,103.899283],\n    [1.361147,103.859596],\n    [1.313641,103.86044],\n    [1.278187,103.87319],\n    [1.307877,103.942198],\n    [1.313025,103.992323],\n    [1.312682,104.031119],\n    [1.355253,104.041085],\n    [1.394037,104.087091],\n    [1.411541,104.086747],\n    [1.434537,104.053445],\n    [1.443461,104.037652],\n    [1.422181,103.99199],\n    [1.429389,103.942209],\n    [1.420808,103.899637],\n    [1.41954,103.89922]];","import React, { useState } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport { setHours, setMinutes, subDays } from \"date-fns\";\nimport PropTypes from 'prop-types';\nimport '../styles/DateTime.css';\n\n\nexport default function DateTime(props) {\n    const [selectedDate, setSelectedDate] = useState(null);\n    const { set_current_date } = props;\n\n    const liftDataUp = (date) => {\n        console.log(selectedDate);\n        setSelectedDate(date);\n        set_current_date(date);\n    };\n\n\n    return(\n      <div className=\"datetime-parent\">\n          <div className=\"textLabel\">Date:</div>\n          <DatePicker\n              selected={selectedDate}\n              onChange={date => liftDataUp(date)}\n              showTimeSelect\n              showYearDropdown\n              timeFormat=\"HH:mm\"\n              timeIntervals={15}\n              timeCaption=\"time\"\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              placeholderText=\"Select a date and time\"\n              popperModifiers={{\n                  preventOverflow: {\n                      enabled: true,\n                  },\n              }}\n              maxDate={subDays(new Date(), 1)}\n              minTime={setHours(setMinutes(new Date(), 0), 0)}\n              maxTime={setHours(setMinutes(new Date(), 45), 23)}\n          />\n      </div>\n    );\n}\n\nDateTime.propTypes = {\n    set_current_date: PropTypes.func.isRequired,\n};","import React, { useState } from 'react';\nimport FormControl from \"react-bootstrap/FormControl\";\n\nconst CustomMenu = React.forwardRef(\n    ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n        const [value, setValue] = useState('');\n\n        return (\n            <div\n                ref={ref}\n                style={style}\n                className={className}\n                aria-labelledby={labeledBy}\n            >\n                <FormControl\n                    autoFocus\n                    className=\"mx-3 my-2 w-auto\"\n                    placeholder=\"Type to filter...\"\n                    onChange={e => setValue(e.target.value)}\n                    value={value}\n                />\n                <ul className=\"list-unstyled\">\n                    {React.Children.toArray(children).filter(\n                        child =>\n                            !value || child.props.children.toLowerCase().startsWith(value),\n                    )}\n                </ul>\n            </div>\n        );\n    },\n);\n\nexport default CustomMenu;","import React from 'react';\nimport { Dropdown } from \"react-bootstrap\";\nimport CustomMenu from \"./custom/CustomMenu\";\nimport PropTypes from 'prop-types';\nimport '../styles/LocationList.css';\n\nexport default function LocationList(props) {\n\n    let dict = {};\n    const { location_data,\n        set_current_traffic_data,\n        set_current_road,\n        location_list_toggle\n    } = props;\n\n    const updateIndex = (index) => {\n        set_current_traffic_data(index);\n    };\n    const updateRoad = e => {\n      e.preventDefault();\n      set_current_road(e.target.value);\n    };\n\n    return (\n        <div className=\"dropdown-roads\">\n            <Dropdown>\n                <Dropdown.Toggle disabled={location_list_toggle} variant=\"success\" id=\"dropdown-basic\" style={{ maxHeight: \"50px\"}}>\n                    List of locations\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu as={CustomMenu}>\n                    {location_data.map((dataset, index) => {\n                        let road = 'Unable to pinpoint location';\n                        if (dataset.data[\"GeocodeInfo\"].length > 0) {\n                            road = dataset.data[\"GeocodeInfo\"][0]['ROAD'];\n                            // Check if the Road exists, if exists append number\n                            if (road in dict) { dict[road] = dict[road] + 1;}\n                            else { dict[road] = 1; }\n                            if (dict[road] > 1) { road = road + \"_\" + dict[road];}\n                        }\n                        return (\n                          <Dropdown.Item\n                              as=\"button\"\n                              value={road}\n                              eventKey={index}\n                              key={index}\n                              onSelect={index => updateIndex(index)}\n                              onClick={e => updateRoad(e)}\n                          >{road}\n                          </Dropdown.Item>\n                        );\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n}\n\nLocationList.propTypes = {\n    location_data: PropTypes.array.isRequired,\n    set_current_traffic_data: PropTypes.func.isRequired,\n    set_current_road: PropTypes.func.isRequired,\n    location_list_toggle: PropTypes.bool.isRequired,\n};","import React, { useState } from 'react';\nimport {Dropdown} from \"react-bootstrap\";\nimport { NORTH, EAST, WEST, SOUTH, CENTRAL} from \"../constants/directions\";\nimport PropTypes from 'prop-types';\nimport '../styles/RegionSelector.css'\n\n\nexport default function RegionSelector(props) {\n\n    const [selectedRegion, setSelectedRegion] = useState(NORTH);\n    const {rev_geocode} = props;\n\n    const updater = (val) => {\n        rev_geocode(val);\n        setSelectedRegion(val);\n    };\n\n    return (\n        <Dropdown className=\"region-dropdown\">\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" style={{ maxHeight: \"50px\"}}>\n                Current Region: {selectedRegion}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item eventKey={NORTH} onSelect={val => updater(val)}>North</Dropdown.Item>\n                <Dropdown.Item eventKey={SOUTH} onSelect={val => updater(val)}>South</Dropdown.Item>\n                <Dropdown.Item eventKey={CENTRAL} onSelect={val => updater(val)}>Central</Dropdown.Item>\n                <Dropdown.Item eventKey={EAST} onSelect={val => updater(val)}>East</Dropdown.Item>\n                <Dropdown.Item eventKey={WEST} onSelect={val => updater(val)}>West</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n\nRegionSelector.propTypes = {\n    rev_geocode: PropTypes.func.isRequired,\n};","export const NORTH = \"NORTH\";\nexport const SOUTH = \"SOUTH\";\nexport const EAST = \"EAST\";\nexport const WEST = \"WEST\";\nexport const CENTRAL = \"CENTRAL\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction WeatherInfo(props) {\n\n    const { weather_data }  = props;\n\n    return (\n      <div>\n          <h6>2 Hr Weather Forecast</h6>\n          <h6>{`Area: ${weather_data['area']}`}</h6>\n          <h6>{`Weather Conditions: ${weather_data['forecast']}`}</h6>\n      </div>\n    );\n}\n\nWeatherInfo.propTypes = {\n    weather_data: PropTypes.object.isRequired,\n};\n\nexport default WeatherInfo;","function distance(lat1, lon1, lat2, lon2) {\n    const p = 0.017453292519943295;    // Math.PI / 180\n    const c = Math.cos;\n    const a = 0.5 - c((lat2 - lat1) * p)/2 +\n        c(lat1 * p) * c(lat2 * p) *\n        (1 - c((lon2 - lon1) * p))/2;\n\n    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\n}\n\n\n// function distance2(lat1, lon1, lat2, lon2) {\n//     const R = 6371; // Radius of the earth in km\n//     const dLat = (lat2 - lat1) * Math.PI / 180;\n//     const dLon = (lon2 - lon1) * Math.PI / 180;\n//     const a =\n//         0.5 - Math.cos(dLat)/2 +\n//         Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n//         (1 - Math.cos(dLon))/2;\n//\n//     return R * 2 * Math.asin(Math.sqrt(a));\n// }\n\n/**\n * @return {number}\n */\nexport function FindNearestGeoPoint(point, data) {\n    /*\n        This function returns the closest index from a point to the data source\n     */\n    let minDiff = 9999;\n    let closest;\n\n    for (let index=0; index<data['area_metadata'].length; index++) {\n        let diff = distance(point.latitude, point.longitude,\n            data['area_metadata'][index]['label_location']['latitude'],\n            data['area_metadata'][index]['label_location']['longitude']);\n        if (diff < minDiff) {\n            closest = index;\n            minDiff = diff;\n        }\n    }\n    return closest;\n}","import axios from 'axios';\nimport { API_ADDRESSES } from \"../../constants/api_addresses\";\n\nconst email = process.env.REACT_APP_ONEMAP_EMAIL;\nconst pwd = process.env.REACT_APP_ONEMAP_PWD;\n\nexport async function TokenValidator() {\n    let bodyFormData = new FormData();\n\n    bodyFormData.set('email', email);\n    bodyFormData.set('password', pwd);\n\n    try {\n        const { data } = await axios({\n            method: 'post',\n            url: API_ADDRESSES['get_token'],\n            data: bodyFormData,\n            headers: {'Content-Type': 'multipart/form-data' }\n        });\n        return data;\n    }\n    catch (error) {\n        if (error.response) {\n            console.log(error.response);\n        }\n    }\n}","import axios from \"axios\";\nimport {API_ADDRESSES} from \"../../constants/api_addresses\";\nimport Cookies from \"js-cookie\";\n\nexport const create_batch_api = (data) => {\n    return data.map((data_val) => {\n        return axios.get(API_ADDRESSES['reverse_geocode'], {\n            params: {\n                location: `${data_val.location.latitude},${data_val.location.longitude}`,\n                buffer: 50,\n                token: Cookies.get('token'),\n            }\n        })\n    });\n};","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\n\nexport function ErrorMessage() {\n    return (\n      <Alert variant=\"danger\">\n          No results retrieved at the selected date. Please select another date.\n      </Alert>\n    );\n}","import  React, { Component } from 'react';\nimport {Button, Container, Row} from 'react-bootstrap';\nimport { Spinner } from \"react-bootstrap\";\nimport './styles/App.css';\n\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { API_ADDRESSES } from \"./constants/api_addresses\";\nimport { NORTH_REGION, SOUTH_REGION, CENTRAL_REGION, EAST_REGION, WEST_REGION } from \"./constants/SingaporeRegion\";\nimport { NORTH } from \"./constants/directions\";\n\nimport _ from 'lodash';\nimport DateTime from \"./components/DateTime\";\nimport LocationList from \"./components/LocationList\";\nimport RegionSelector from \"./components/RegionSelector\";\nimport WeatherInfo from \"./components/WeatherInfo\";\nimport classifyPoint from 'robust-point-in-polygon';\nimport { FindNearestGeoPoint } from './components/utils/FindNearestGeoPoint';\nimport { TokenValidator } from \"./components/utils/TokenValidator\";\nimport { create_batch_api } from \"./components/utils/CreateBatchAPI\";\nimport { ErrorMessage } from \"./components/ErrorMessage\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image_data : [],\n      weather_data: [],\n      Regions: {},\n      location_data : [],\n      current_region: NORTH,\n      current_road: '',\n      current_index: null,\n      current_traffic_data: [],\n      current_weather_data: {},\n      current_date: '',\n      loading_button: false,\n      location_list_toggle: false,\n      error_message: false,\n    };\n  }\n\n  fetch_traffic_and_weather_data = async () => {\n    /*\n      This function is fetches traffic and weather data\n      If success, classifying_points_to_regions() will be called\n     */\n    this.setState({ loading_button: true, error_message: false });\n\n    let tzoffset = (new Date()).getTimezoneOffset() * 60000;\n    let localISOTime = (new Date(this.state.current_date - tzoffset)).toISOString().split('.')[0];\n\n    try {\n      const traffic_images_data = await axios.get(API_ADDRESSES['traffic_images'], {\n        params: {\n          'date_time': localISOTime,\n        }\n      });\n\n      const weather_forecast_data = await axios.get(API_ADDRESSES['weather_forecast'], {\n        params: {\n          'date_time': localISOTime,\n        }\n      });\n\n      if (_.isEmpty(traffic_images_data.data['items'][0])) {\n        this.setState({\n          loading_button: false,\n          error_message: true\n        });\n      }\n      else {\n        this.setState({\n          image_data: traffic_images_data.data['items'][0]['cameras'],\n          weather_data: weather_forecast_data.data,\n        }, () => this.classifying_points_to_regions());\n      }\n    }\n    catch (error) {\n      if (error.response) {\n        console.log(error.response);\n      }\n    }\n  };\n\n  classifying_points_to_regions = () => {\n    // split the coordinates into north, south, east, west and central\n    let north = [];\n    let south = [];\n    let east = [];\n    let west = [];\n    let central = [];\n\n    let data_val = this.state.image_data;\n    for (let i=0; i < data_val.length; i++) {\n      let point = [data_val[i].location.latitude, data_val[i].location.longitude];\n\n      if (classifyPoint(NORTH_REGION, point) !== 1) { north.push(data_val[i]); continue;}\n      if (classifyPoint(SOUTH_REGION, point) !== 1) {south.push(data_val[i]);continue;}\n      if (classifyPoint(CENTRAL_REGION, point) !== 1) { central.push(data_val[i]);continue;}\n      if (classifyPoint(EAST_REGION, point) !== 1) {east.push(data_val[i]);continue;}\n      if (classifyPoint(WEST_REGION, point) !== 1) {west.push(data_val[i]);}\n    }\n\n    this.setState({\n      Regions: {\n        NORTH: north,\n        SOUTH: south,\n        CENTRAL: central,\n        EAST: east,\n        WEST: west\n      },\n    }, ()=> this.rev_geocode(this.state.current_region));\n  };\n\n  rev_geocode = async (current_region) => {\n    /*\n      Reverse geocode the list of lat long coordinates from traffic data\n     */\n    this.setState({ loading_button: true, location_list_toggle: true });\n    const list_of_promises = create_batch_api(this.state.Regions[current_region]);\n    const data  = await axios.all(list_of_promises);\n    this.setState({\n      location_data: data,\n      current_region,\n      loading_button: false,\n      location_list_toggle: false,\n    });\n  };\n\n  set_current_traffic_data = (index) => {\n    /*\n      A function called by <LocationList /> to set the current selected traffic data\n     */\n    let current_traffic_data = this.state.Regions[this.state.current_region][index];\n    console.log(current_traffic_data['location']);\n    this.setState({\n      current_traffic_data,\n      current_index: index,\n    }, () => {\n      this.set_current_weather_condition_and_approx_location();\n    });\n  };\n\n  set_current_road = (current_road) => {\n    /*\n      This function is called by <LocationList /> to set the name of the road\n      to be displayed on the front end.\n     */\n    this.setState({\n      current_road\n    });\n  };\n\n  // Return the closest location and the weather condition\n  set_current_weather_condition_and_approx_location = () => {\n    let latitude = this.state.current_traffic_data['location']['latitude'];\n    let longitude = this.state.current_traffic_data['location']['longitude'];\n\n    let index = FindNearestGeoPoint({latitude, longitude}, this.state.weather_data);\n    this.setState({\n      current_weather_data: this.state.weather_data['items'][0]['forecasts'][index],\n    });\n  };\n\n  set_current_date = (current_date) => {\n    /*\n      This function is called by <DateTime />\n     */\n    this.setState({ current_date });\n  };\n\n  componentDidMount() {\n    /*\n      Gets the token for reverse geocode\n     */\n    const token_promise = TokenValidator();\n    token_promise.then(data => {\n      Cookies.set('token', data['access_token']);\n    }).catch(err => {\n      console.log(err);\n    });\n\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Container>\n            <h1 className=\"center display-4\">Traffic Weather Watcher</h1>\n            <p className=\"center lead\">This is a simple app that displays traffic images and weather forecast.</p>\n            <hr className=\"my-4\" />\n            <Row className=\"center\">\n                <DateTime set_current_date={this.set_current_date}/>\n                <div className=\"go-button-div\">\n                  {this.state.loading_button ? (\n                      <Button variant=\"primary\" disabled>\n                        <Spinner\n                            as=\"span\"\n                            animation=\"grow\"\n                            size=\"sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                        />\n                        Loading...\n                      </Button>\n                  ): (<Button className=\"go-button\"\n                              variant=\"primary\"\n                              onClick={this.fetch_traffic_and_weather_data}>Go</Button>)}\n                </div>\n\n            </Row>\n\n            {!_.isEmpty(this.state.location_data) && !this.state.error_message ?\n                (<div className=\"controls\">\n                  <div className=\"control\">\n                    <RegionSelector rev_geocode={this.rev_geocode}/>\n                  </div>\n                  <div className=\"break\"></div>\n                  <div className=\"control\">\n                    <LocationList location_data={this.state.location_data}\n                                  set_current_traffic_data={this.set_current_traffic_data}\n                                  set_current_road={this.set_current_road}\n                                  location_list_toggle={this.state.location_list_toggle}\n                    />\n                  </div>\n                </div>) : null\n            }\n\n            {this.state.error_message ?\n                (<div className=\"center\"><ErrorMessage /></div>) : null\n            }\n\n            <br/>\n            <h5>{this.state.current_road}</h5>\n            {!_.isEmpty(this.state.current_traffic_data) && !_.isEmpty(this.state.current_weather_data) ?\n                (<Row className=\"center\">\n                  <div id=\"img-container\">\n                    <img src={this.state.current_traffic_data['image']} alt=\"\"/>\n                  </div>\n                  <WeatherInfo weather_data={this.state.current_weather_data}/>\n                </Row>) : null\n            }\n          </Container>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}